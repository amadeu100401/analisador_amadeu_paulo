2022-09-25 15:36:05:177 grammar LogManager.java:25 load Lex from MeAL.g4
2022-09-25 15:36:05:180 grammar LogManager.java:25 before: (COMBINED_GRAMMAR MeAL (import Lex) (RULES (RULE prog (BLOCK (ALT 'PROGRAM' IDENTIFIER PVIG decls cmdComp PONTO) (ALT 'PROGRAM' IDENTIFIER PVIG cmdComp PONTO))) (RULE decls (BLOCK (ALT 'VAR' listDecl))) (RULE listDecl (BLOCK (ALT declTip) (ALT declTip listDecl))) (RULE declTip (BLOCK (ALT listId DPONTOS tip PVIG))) (RULE listId (BLOCK (ALT IDENTIFIER) (ALT IDENTIFIER VIG listId))) (RULE tip (BLOCK (ALT 'STRING') (ALT 'INTEGER') (ALT 'BOOLEAN'))) (RULE cmdComp (BLOCK (ALT 'BEGIN' listCmd 'END'))) (RULE listCmd (BLOCK (ALT cmd PVIG) (ALT cmd PVIG listCmd))) (RULE cmd (BLOCK (ALT cmdIf) (ALT cmdWhile) (ALT cmdRead) (ALT cmdWrite) (ALT cmdAtrib) (ALT cmdAtrib) (ALT cmdComp))) (RULE cmdIf (BLOCK (ALT 'IF' expr 'THEN' cmd) (ALT 'IF' expr 'THEN' cmd 'ELSE' cmd))) (RULE cmdWhile (BLOCK (ALT 'WHILE' expr 'DO' cmd) (ALT 'WHILE' exprBool 'DO' cmd))) (RULE cmdRead (BLOCK (ALT 'READ' ABPAR listId FPAR))) (RULE cmdWrite (BLOCK (ALT 'WRITE' ABPAR listW FPAR))) (RULE listW (BLOCK (ALT elemW) (ALT elemW VIG listW))) (RULE elemW (BLOCK (ALT expr) (ALT CADEIA))) (RULE cmdAtrib (BLOCK (ALT IDENTIFIER ATRIB expr))) (RULE expr (BLOCK (ALT CTE OPREL expr) (ALT CTE OPAD expr) (ALT CTE) (ALT CTE OPMULT expr) (ALT ABPAR expr FPAR) (ALT IDENTIFIER OPREL expr) (ALT IDENTIFIER OPAD expr) (ALT IDENTIFIER OPMULT expr) (ALT IDENTIFIER OPLOG expr) (ALT IDENTIFIER ATRIB expr) (ALT (? (BLOCK (ALT OPNEG))) IDENTIFIER) (ALT (? (BLOCK (ALT OPNEG))) ABPAR exprBool FPAR) (ALT exprBool) (ALT IDENTIFIER) (ALT CADEIA))) (RULE exprBool (BLOCK (ALT IDENTIFIER) (ALT CTE) (ALT ABPAR exprBool FPAR) (ALT IDENTIFIER OPREL IDENTIFIER) (ALT CTE OPREL CTE) (ALT CTE OPREL IDENTIFIER) (ALT IDENTIFIER OPREL CTE) (ALT IDENTIFIER OPREL BOOLEAN) (ALT (? (BLOCK (ALT OPNEG))) BOOLEAN)))))
2022-09-25 15:36:05:182 grammar LogManager.java:25 imported actions: []
2022-09-25 15:36:05:182 grammar LogManager.java:25 imported rule: (RULE CTE (BLOCK (ALT (+ (BLOCK (ALT [0-9])))) (ALT '-' (+ (BLOCK (ALT [0-9]))))))
2022-09-25 15:36:05:182 grammar LogManager.java:25 imported rule: (RULE CADEIA (BLOCK (ALT '"' (+ (BLOCK (ALT (.. 'A' 'Z')) (ALT (.. 'a' 'z')) (ALT (.. '0' '9')) (ALT '-') (ALT '_'))) '"')))
2022-09-25 15:36:05:182 grammar LogManager.java:25 imported rule: (RULE IDENTIFIER (BLOCK (ALT [a-zA-Z] (* (BLOCK (ALT [a-zA-Z0-9]))))))
2022-09-25 15:36:05:182 grammar LogManager.java:25 imported rule: (RULE BOOLEAN (BLOCK (ALT 'TRUE') (ALT 'FALSE')))
2022-09-25 15:36:05:182 grammar LogManager.java:25 imported rule: (RULE OPAD (BLOCK (ALT '+') (ALT '-')))
2022-09-25 15:36:05:182 grammar LogManager.java:25 imported rule: (RULE OPMULT (BLOCK (ALT '*') (ALT '/')))
2022-09-25 15:36:05:182 grammar LogManager.java:25 imported rule: (RULE OPLOG (BLOCK (ALT 'OR') (ALT 'AND')))
2022-09-25 15:36:05:182 grammar LogManager.java:25 imported rule: (RULE OPNEG (BLOCK (ALT '~')))
2022-09-25 15:36:05:182 grammar LogManager.java:25 imported rule: (RULE OPREL (BLOCK (ALT '<') (ALT '<=') (ALT '>') (ALT '>=') (ALT '==') (ALT '<>')))
2022-09-25 15:36:05:182 grammar LogManager.java:25 imported rule: (RULE PVIG (BLOCK (ALT ';')))
2022-09-25 15:36:05:182 grammar LogManager.java:25 imported rule: (RULE PONTO (BLOCK (ALT '.')))
2022-09-25 15:36:05:182 grammar LogManager.java:25 imported rule: (RULE DPONTOS (BLOCK (ALT ':')))
2022-09-25 15:36:05:182 grammar LogManager.java:25 imported rule: (RULE VIG (BLOCK (ALT ',')))
2022-09-25 15:36:05:182 grammar LogManager.java:25 imported rule: (RULE ABPAR (BLOCK (ALT '(')))
2022-09-25 15:36:05:182 grammar LogManager.java:25 imported rule: (RULE FPAR (BLOCK (ALT ')')))
2022-09-25 15:36:05:182 grammar LogManager.java:25 imported rule: (RULE ATRIB (BLOCK (ALT ':=')))
2022-09-25 15:36:05:182 grammar LogManager.java:25 imported rule: (RULE RESERVADA (BLOCK (ALT 'PROGRAM') (ALT 'BEGIN') (ALT 'END') (ALT 'WHILE') (ALT 'DO') (ALT 'READ') (ALT 'VAR') (ALT 'WRITE') (ALT 'IF') (ALT 'ELSE')))
2022-09-25 15:36:05:182 grammar LogManager.java:25 imported rule: (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT ' ') (ALT '\t') (ALT '\n') (ALT '\r')))) skip)))
2022-09-25 15:36:05:182 grammar LogManager.java:25 imported rule: (RULE COMENTARIO (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip)))
2022-09-25 15:36:05:183 grammar LogManager.java:25 Grammar: (COMBINED_GRAMMAR MeAL (import Lex) (RULES (RULE prog (BLOCK (ALT 'PROGRAM' IDENTIFIER PVIG decls cmdComp PONTO) (ALT 'PROGRAM' IDENTIFIER PVIG cmdComp PONTO))) (RULE decls (BLOCK (ALT 'VAR' listDecl))) (RULE listDecl (BLOCK (ALT declTip) (ALT declTip listDecl))) (RULE declTip (BLOCK (ALT listId DPONTOS tip PVIG))) (RULE listId (BLOCK (ALT IDENTIFIER) (ALT IDENTIFIER VIG listId))) (RULE tip (BLOCK (ALT 'STRING') (ALT 'INTEGER') (ALT 'BOOLEAN'))) (RULE cmdComp (BLOCK (ALT 'BEGIN' listCmd 'END'))) (RULE listCmd (BLOCK (ALT cmd PVIG) (ALT cmd PVIG listCmd))) (RULE cmd (BLOCK (ALT cmdIf) (ALT cmdWhile) (ALT cmdRead) (ALT cmdWrite) (ALT cmdAtrib) (ALT cmdAtrib) (ALT cmdComp))) (RULE cmdIf (BLOCK (ALT 'IF' expr 'THEN' cmd) (ALT 'IF' expr 'THEN' cmd 'ELSE' cmd))) (RULE cmdWhile (BLOCK (ALT 'WHILE' expr 'DO' cmd) (ALT 'WHILE' exprBool 'DO' cmd))) (RULE cmdRead (BLOCK (ALT 'READ' ABPAR listId FPAR))) (RULE cmdWrite (BLOCK (ALT 'WRITE' ABPAR listW FPAR))) (RULE listW (BLOCK (ALT elemW) (ALT elemW VIG listW))) (RULE elemW (BLOCK (ALT expr) (ALT CADEIA))) (RULE cmdAtrib (BLOCK (ALT IDENTIFIER ATRIB expr))) (RULE expr (BLOCK (ALT CTE OPREL expr) (ALT CTE OPAD expr) (ALT CTE) (ALT CTE OPMULT expr) (ALT ABPAR expr FPAR) (ALT IDENTIFIER OPREL expr) (ALT IDENTIFIER OPAD expr) (ALT IDENTIFIER OPMULT expr) (ALT IDENTIFIER OPLOG expr) (ALT IDENTIFIER ATRIB expr) (ALT (? (BLOCK (ALT OPNEG))) IDENTIFIER) (ALT (? (BLOCK (ALT OPNEG))) ABPAR exprBool FPAR) (ALT exprBool) (ALT IDENTIFIER) (ALT CADEIA))) (RULE exprBool (BLOCK (ALT IDENTIFIER) (ALT CTE) (ALT ABPAR exprBool FPAR) (ALT IDENTIFIER OPREL IDENTIFIER) (ALT CTE OPREL CTE) (ALT CTE OPREL IDENTIFIER) (ALT IDENTIFIER OPREL CTE) (ALT IDENTIFIER OPREL BOOLEAN) (ALT (? (BLOCK (ALT OPNEG))) BOOLEAN))) (RULE CTE (BLOCK (ALT (+ (BLOCK (ALT [0-9])))) (ALT '-' (+ (BLOCK (ALT [0-9])))))) (RULE CADEIA (BLOCK (ALT '"' (+ (BLOCK (ALT (.. 'A' 'Z')) (ALT (.. 'a' 'z')) (ALT (.. '0' '9')) (ALT '-') (ALT '_'))) '"'))) (RULE IDENTIFIER (BLOCK (ALT [a-zA-Z] (* (BLOCK (ALT [a-zA-Z0-9])))))) (RULE BOOLEAN (BLOCK (ALT 'TRUE') (ALT 'FALSE'))) (RULE OPAD (BLOCK (ALT '+') (ALT '-'))) (RULE OPMULT (BLOCK (ALT '*') (ALT '/'))) (RULE OPLOG (BLOCK (ALT 'OR') (ALT 'AND'))) (RULE OPNEG (BLOCK (ALT '~'))) (RULE OPREL (BLOCK (ALT '<') (ALT '<=') (ALT '>') (ALT '>=') (ALT '==') (ALT '<>'))) (RULE PVIG (BLOCK (ALT ';'))) (RULE PONTO (BLOCK (ALT '.'))) (RULE DPONTOS (BLOCK (ALT ':'))) (RULE VIG (BLOCK (ALT ','))) (RULE ABPAR (BLOCK (ALT '('))) (RULE FPAR (BLOCK (ALT ')'))) (RULE ATRIB (BLOCK (ALT ':='))) (RULE RESERVADA (BLOCK (ALT 'PROGRAM') (ALT 'BEGIN') (ALT 'END') (ALT 'WHILE') (ALT 'DO') (ALT 'READ') (ALT 'VAR') (ALT 'WRITE') (ALT 'IF') (ALT 'ELSE'))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT ' ') (ALT '\t') (ALT '\n') (ALT '\r')))) skip))) (RULE COMENTARIO (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip)))))
2022-09-25 15:36:05:195 grammar LogManager.java:25 after: (COMBINED_GRAMMAR MeAL (import Lex) (RULES (RULE prog (BLOCK (ALT 'PROGRAM' IDENTIFIER PVIG decls cmdComp PONTO) (ALT 'PROGRAM' IDENTIFIER PVIG cmdComp PONTO))) (RULE decls (BLOCK (ALT 'VAR' listDecl))) (RULE listDecl (BLOCK (ALT declTip) (ALT declTip listDecl))) (RULE declTip (BLOCK (ALT listId DPONTOS tip PVIG))) (RULE listId (BLOCK (ALT IDENTIFIER) (ALT IDENTIFIER VIG listId))) (RULE tip (BLOCK (ALT (SET 'STRING' 'INTEGER' 'BOOLEAN')))) (RULE cmdComp (BLOCK (ALT 'BEGIN' listCmd 'END'))) (RULE listCmd (BLOCK (ALT cmd PVIG) (ALT cmd PVIG listCmd))) (RULE cmd (BLOCK (ALT cmdIf) (ALT cmdWhile) (ALT cmdRead) (ALT cmdWrite) (ALT cmdAtrib) (ALT cmdAtrib) (ALT cmdComp))) (RULE cmdIf (BLOCK (ALT 'IF' expr 'THEN' cmd) (ALT 'IF' expr 'THEN' cmd 'ELSE' cmd))) (RULE cmdWhile (BLOCK (ALT 'WHILE' expr 'DO' cmd) (ALT 'WHILE' exprBool 'DO' cmd))) (RULE cmdRead (BLOCK (ALT 'READ' ABPAR listId FPAR))) (RULE cmdWrite (BLOCK (ALT 'WRITE' ABPAR listW FPAR))) (RULE listW (BLOCK (ALT elemW) (ALT elemW VIG listW))) (RULE elemW (BLOCK (ALT expr) (ALT CADEIA))) (RULE cmdAtrib (BLOCK (ALT IDENTIFIER ATRIB expr))) (RULE expr (BLOCK (ALT CTE OPREL expr) (ALT CTE OPAD expr) (ALT CTE) (ALT CTE OPMULT expr) (ALT ABPAR expr FPAR) (ALT IDENTIFIER OPREL expr) (ALT IDENTIFIER OPAD expr) (ALT IDENTIFIER OPMULT expr) (ALT IDENTIFIER OPLOG expr) (ALT IDENTIFIER ATRIB expr) (ALT (? (BLOCK (ALT OPNEG))) IDENTIFIER) (ALT (? (BLOCK (ALT OPNEG))) ABPAR exprBool FPAR) (ALT exprBool) (ALT IDENTIFIER) (ALT CADEIA))) (RULE exprBool (BLOCK (ALT IDENTIFIER) (ALT CTE) (ALT ABPAR exprBool FPAR) (ALT IDENTIFIER OPREL IDENTIFIER) (ALT CTE OPREL CTE) (ALT CTE OPREL IDENTIFIER) (ALT IDENTIFIER OPREL CTE) (ALT IDENTIFIER OPREL BOOLEAN) (ALT (? (BLOCK (ALT OPNEG))) BOOLEAN))) (RULE CTE (BLOCK (ALT (+ (BLOCK (ALT [0-9])))) (ALT '-' (+ (BLOCK (ALT [0-9])))))) (RULE CADEIA (BLOCK (ALT '"' (+ (BLOCK (ALT (SET (.. 'A' 'Z') (.. 'a' 'z') (.. '0' '9') '-' '_')))) '"'))) (RULE IDENTIFIER (BLOCK (ALT [a-zA-Z] (* (BLOCK (ALT [a-zA-Z0-9])))))) (RULE BOOLEAN (BLOCK (ALT 'TRUE') (ALT 'FALSE'))) (RULE OPAD (BLOCK (ALT (SET '+' '-')))) (RULE OPMULT (BLOCK (ALT (SET '*' '/')))) (RULE OPLOG (BLOCK (ALT 'OR') (ALT 'AND'))) (RULE OPNEG (BLOCK (ALT '~'))) (RULE OPREL (BLOCK (ALT '<') (ALT '<=') (ALT '>') (ALT '>=') (ALT '==') (ALT '<>'))) (RULE PVIG (BLOCK (ALT ';'))) (RULE PONTO (BLOCK (ALT '.'))) (RULE DPONTOS (BLOCK (ALT ':'))) (RULE VIG (BLOCK (ALT ','))) (RULE ABPAR (BLOCK (ALT '('))) (RULE FPAR (BLOCK (ALT ')'))) (RULE ATRIB (BLOCK (ALT ':='))) (RULE RESERVADA (BLOCK (ALT 'PROGRAM') (ALT 'BEGIN') (ALT 'END') (ALT 'WHILE') (ALT 'DO') (ALT 'READ') (ALT 'VAR') (ALT 'WRITE') (ALT 'IF') (ALT 'ELSE'))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT (SET ' ' '\t' '\n' '\r'))))) skip))) (RULE COMENTARIO (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip)))))
2022-09-25 15:36:05:207 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR MeAL (import Lex) (RULES (RULE prog (BLOCK (ALT 'PROGRAM' IDENTIFIER PVIG decls cmdComp PONTO) (ALT 'PROGRAM' IDENTIFIER PVIG cmdComp PONTO))) (RULE decls (BLOCK (ALT 'VAR' listDecl))) (RULE listDecl (BLOCK (ALT declTip) (ALT declTip listDecl))) (RULE declTip (BLOCK (ALT listId DPONTOS tip PVIG))) (RULE listId (BLOCK (ALT IDENTIFIER) (ALT IDENTIFIER VIG listId))) (RULE tip (BLOCK (ALT (SET 'STRING' 'INTEGER' 'BOOLEAN')))) (RULE cmdComp (BLOCK (ALT 'BEGIN' listCmd 'END'))) (RULE listCmd (BLOCK (ALT cmd PVIG) (ALT cmd PVIG listCmd))) (RULE cmd (BLOCK (ALT cmdIf) (ALT cmdWhile) (ALT cmdRead) (ALT cmdWrite) (ALT cmdAtrib) (ALT cmdAtrib) (ALT cmdComp))) (RULE cmdIf (BLOCK (ALT 'IF' expr 'THEN' cmd) (ALT 'IF' expr 'THEN' cmd 'ELSE' cmd))) (RULE cmdWhile (BLOCK (ALT 'WHILE' expr 'DO' cmd) (ALT 'WHILE' exprBool 'DO' cmd))) (RULE cmdRead (BLOCK (ALT 'READ' ABPAR listId FPAR))) (RULE cmdWrite (BLOCK (ALT 'WRITE' ABPAR listW FPAR))) (RULE listW (BLOCK (ALT elemW) (ALT elemW VIG listW))) (RULE elemW (BLOCK (ALT expr) (ALT CADEIA))) (RULE cmdAtrib (BLOCK (ALT IDENTIFIER ATRIB expr))) (RULE expr (BLOCK (ALT CTE OPREL expr) (ALT CTE OPAD expr) (ALT CTE) (ALT CTE OPMULT expr) (ALT ABPAR expr FPAR) (ALT IDENTIFIER OPREL expr) (ALT IDENTIFIER OPAD expr) (ALT IDENTIFIER OPMULT expr) (ALT IDENTIFIER OPLOG expr) (ALT IDENTIFIER ATRIB expr) (ALT (? (BLOCK (ALT OPNEG))) IDENTIFIER) (ALT (? (BLOCK (ALT OPNEG))) ABPAR exprBool FPAR) (ALT exprBool) (ALT IDENTIFIER) (ALT CADEIA))) (RULE exprBool (BLOCK (ALT IDENTIFIER) (ALT CTE) (ALT ABPAR exprBool FPAR) (ALT IDENTIFIER OPREL IDENTIFIER) (ALT CTE OPREL CTE) (ALT CTE OPREL IDENTIFIER) (ALT IDENTIFIER OPREL CTE) (ALT IDENTIFIER OPREL BOOLEAN) (ALT (? (BLOCK (ALT OPNEG))) BOOLEAN)))))
2022-09-25 15:36:05:207 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR MeALLexer (RULES (RULE T__0 (BLOCK (ALT 'PROGRAM'))) (RULE T__1 (BLOCK (ALT 'VAR'))) (RULE T__2 (BLOCK (ALT 'STRING'))) (RULE T__3 (BLOCK (ALT 'INTEGER'))) (RULE T__4 (BLOCK (ALT 'BOOLEAN'))) (RULE T__5 (BLOCK (ALT 'BEGIN'))) (RULE T__6 (BLOCK (ALT 'END'))) (RULE T__7 (BLOCK (ALT 'IF'))) (RULE T__8 (BLOCK (ALT 'THEN'))) (RULE T__9 (BLOCK (ALT 'ELSE'))) (RULE T__10 (BLOCK (ALT 'WHILE'))) (RULE T__11 (BLOCK (ALT 'DO'))) (RULE T__12 (BLOCK (ALT 'READ'))) (RULE T__13 (BLOCK (ALT 'WRITE'))) (RULE CTE (BLOCK (ALT (+ (BLOCK (ALT [0-9])))) (ALT '-' (+ (BLOCK (ALT [0-9])))))) (RULE CADEIA (BLOCK (ALT '"' (+ (BLOCK (ALT (SET (.. 'A' 'Z') (.. 'a' 'z') (.. '0' '9') '-' '_')))) '"'))) (RULE IDENTIFIER (BLOCK (ALT [a-zA-Z] (* (BLOCK (ALT [a-zA-Z0-9])))))) (RULE BOOLEAN (BLOCK (ALT 'TRUE') (ALT 'FALSE'))) (RULE OPAD (BLOCK (ALT (SET '+' '-')))) (RULE OPMULT (BLOCK (ALT (SET '*' '/')))) (RULE OPLOG (BLOCK (ALT 'OR') (ALT 'AND'))) (RULE OPNEG (BLOCK (ALT '~'))) (RULE OPREL (BLOCK (ALT '<') (ALT '<=') (ALT '>') (ALT '>=') (ALT '==') (ALT '<>'))) (RULE PVIG (BLOCK (ALT ';'))) (RULE PONTO (BLOCK (ALT '.'))) (RULE DPONTOS (BLOCK (ALT ':'))) (RULE VIG (BLOCK (ALT ','))) (RULE ABPAR (BLOCK (ALT '('))) (RULE FPAR (BLOCK (ALT ')'))) (RULE ATRIB (BLOCK (ALT ':='))) (RULE RESERVADA (BLOCK (ALT 'PROGRAM') (ALT 'BEGIN') (ALT 'END') (ALT 'WHILE') (ALT 'DO') (ALT 'READ') (ALT 'VAR') (ALT 'WRITE') (ALT 'IF') (ALT 'ELSE'))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT (SET ' ' '\t' '\n' '\r'))))) skip))) (RULE COMENTARIO (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip)))))
2022-09-25 15:36:05:314 semantics LogManager.java:25 tokens={EOF=-1, T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, CTE=15, CADEIA=16, IDENTIFIER=17, BOOLEAN=18, OPAD=19, OPMULT=20, OPLOG=21, OPNEG=22, OPREL=23, PVIG=24, PONTO=25, DPONTOS=26, VIG=27, ABPAR=28, FPAR=29, ATRIB=30, RESERVADA=31, WS=32, COMENTARIO=33}
2022-09-25 15:36:05:314 semantics LogManager.java:25 strings={'PROGRAM'=1, 'VAR'=2, 'STRING'=3, 'INTEGER'=4, 'BOOLEAN'=5, 'BEGIN'=6, 'END'=7, 'IF'=8, 'THEN'=9, 'ELSE'=10, 'WHILE'=11, 'DO'=12, 'READ'=13, 'WRITE'=14, '~'=22, ';'=24, '.'=25, ':'=26, ','=27, '('=28, ')'=29, ':='=30}
2022-09-25 15:36:05:317 LL1 LogManager.java:25 
DECISION 0 in rule prog
2022-09-25 15:36:05:319 LL1 LogManager.java:25 look=[1, 1]
2022-09-25 15:36:05:319 LL1 LogManager.java:25 LL(1)? false
2022-09-25 15:36:05:319 LL1 LogManager.java:25 
DECISION 1 in rule listDecl
2022-09-25 15:36:05:319 LL1 LogManager.java:25 look=[17, 17]
2022-09-25 15:36:05:319 LL1 LogManager.java:25 LL(1)? false
2022-09-25 15:36:05:319 LL1 LogManager.java:25 
DECISION 2 in rule listId
2022-09-25 15:36:05:319 LL1 LogManager.java:25 look=[17, 17]
2022-09-25 15:36:05:319 LL1 LogManager.java:25 LL(1)? false
2022-09-25 15:36:05:319 LL1 LogManager.java:25 
DECISION 3 in rule listCmd
2022-09-25 15:36:05:319 LL1 LogManager.java:25 look=[{6, 8, 11, 13..14, 17}, {6, 8, 11, 13..14, 17}]
2022-09-25 15:36:05:319 LL1 LogManager.java:25 LL(1)? false
2022-09-25 15:36:05:319 LL1 LogManager.java:25 
DECISION 4 in rule cmd
2022-09-25 15:36:05:319 LL1 LogManager.java:25 look=[8, 11, 13, 14, 17, 17, 6]
2022-09-25 15:36:05:319 LL1 LogManager.java:25 LL(1)? false
2022-09-25 15:36:05:320 LL1 LogManager.java:25 
DECISION 5 in rule cmdIf
2022-09-25 15:36:05:320 LL1 LogManager.java:25 look=[8, 8]
2022-09-25 15:36:05:320 LL1 LogManager.java:25 LL(1)? false
2022-09-25 15:36:05:320 LL1 LogManager.java:25 
DECISION 6 in rule cmdWhile
2022-09-25 15:36:05:320 LL1 LogManager.java:25 look=[11, 11]
2022-09-25 15:36:05:320 LL1 LogManager.java:25 LL(1)? false
2022-09-25 15:36:05:320 LL1 LogManager.java:25 
DECISION 7 in rule listW
2022-09-25 15:36:05:320 LL1 LogManager.java:25 look=[{15..18, 22, 28}, {15..18, 22, 28}]
2022-09-25 15:36:05:320 LL1 LogManager.java:25 LL(1)? false
2022-09-25 15:36:05:320 LL1 LogManager.java:25 
DECISION 8 in rule elemW
2022-09-25 15:36:05:320 LL1 LogManager.java:25 look=[{15..18, 22, 28}, 16]
2022-09-25 15:36:05:320 LL1 LogManager.java:25 LL(1)? false
2022-09-25 15:36:05:320 LL1 LogManager.java:25 
DECISION 9 in rule expr
2022-09-25 15:36:05:320 LL1 LogManager.java:25 look=[22, 17]
2022-09-25 15:36:05:320 LL1 LogManager.java:25 LL(1)? true
2022-09-25 15:36:05:320 LL1 LogManager.java:25 
DECISION 10 in rule expr
2022-09-25 15:36:05:320 LL1 LogManager.java:25 look=[22, 28]
2022-09-25 15:36:05:320 LL1 LogManager.java:25 LL(1)? true
2022-09-25 15:36:05:320 LL1 LogManager.java:25 
DECISION 11 in rule expr
2022-09-25 15:36:05:320 LL1 LogManager.java:25 look=[15, 15, 15, 15, 28, 17, 17, 17, 17, 17, {17, 22}, {22, 28}, {15, 17..18, 22, 28}, 17, 16]
2022-09-25 15:36:05:320 LL1 LogManager.java:25 LL(1)? false
2022-09-25 15:36:05:320 LL1 LogManager.java:25 
DECISION 12 in rule exprBool
2022-09-25 15:36:05:320 LL1 LogManager.java:25 look=[22, 18]
2022-09-25 15:36:05:320 LL1 LogManager.java:25 LL(1)? true
2022-09-25 15:36:05:321 LL1 LogManager.java:25 
DECISION 13 in rule exprBool
2022-09-25 15:36:05:321 LL1 LogManager.java:25 look=[17, 15, 28, 17, 15, 15, 17, 17, {18, 22}]
2022-09-25 15:36:05:321 LL1 LogManager.java:25 LL(1)? false
