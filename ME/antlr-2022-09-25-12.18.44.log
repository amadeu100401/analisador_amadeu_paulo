2022-09-25 12:18:44:371 grammar LogManager.java:25 load Lex from MeAL.g4
2022-09-25 12:18:44:374 grammar LogManager.java:25 before: (COMBINED_GRAMMAR MeAL (import Lex) (RULES (RULE prog (BLOCK (ALT 'PROGRAM' IDENTIFIER PVIG decls cmdComp PONTO) (ALT 'PROGRAM' IDENTIFIER PVIG cmdComp PONTO))) (RULE decls (BLOCK (ALT 'VAR' listDecl))) (RULE listDecl (BLOCK (ALT declTip) (ALT declTip listDecl))) (RULE declTip (BLOCK (ALT listId DPONTOS tip PVIG))) (RULE listId (BLOCK (ALT IDENTIFIER) (ALT IDENTIFIER VIG listId))) (RULE cmdComp (BLOCK (ALT 'BEGIN' listCmd 'END'))) (RULE listCmd (BLOCK (ALT cmd) (ALT cmd 'PVIG' listCmd))) (RULE cmd (BLOCK (ALT cmdIf) (ALT cmdWhile) (ALT cmdRead) (ALT cmdWrite) (ALT cmdAtrib) (ALT cmdAtrib) (ALT cmdComp))) (RULE cmdIf (BLOCK (ALT 'IF' expr 'THEN' cmd) (ALT expr 'Then' cmd 'ELSE' cmd))) (RULE cmdWhile (BLOCK (ALT 'WHILE' expr 'DO' cmd))) (RULE cmdRead (BLOCK (ALT 'READ' ABPAR listId FPAR))) (RULE cmdWrite (BLOCK (ALT 'WRITE' ABPAR listW FPAR))) (RULE listW (BLOCK (ALT elemW) (ALT elemW VIG listW))) (RULE elemW (BLOCK (ALT expr) (ALT CADEIA))) (RULE cmdAtrib (BLOCK (ALT IDENTIFIER ATRIB expr))) (RULE expr (BLOCK (ALT INTEIROS OPREL expr) (ALT INTEIROS OPAD expr) (ALT INTEIROS) (ALT INTEIROS OPMULT expr) (ALT ABPAR expr FPAR) (ALT INTEIROS OPLOG expr) (ALT IDENTIFIER) (ALT IDENTIFIER OPREL expr) (ALT IDENTIFIER OPAD expr) (ALT IDENTIFIER OPMULT expr) (ALT IDENTIFIER OPLOG expr))) (RULE exprBool (BLOCK (ALT IDENTIFIER) (ALT CTE) (ALT ABPAR exprBool FPAR) (ALT IDENTIFIER OPREL IDENTIFIER) (ALT CTE OPREL CTE) (ALT CTE OPREL IDENTIFIER) (ALT IDENTIFIER OPREL CTE)))))
2022-09-25 12:18:44:376 grammar LogManager.java:25 imported actions: []
2022-09-25 12:18:44:377 grammar LogManager.java:25 imported rule: (RULE LETRA (BLOCK (ALT [a-zA-Z])))
2022-09-25 12:18:44:377 grammar LogManager.java:25 imported rule: (RULE CTE (BLOCK (ALT (+ (BLOCK (ALT [0-9])))) (ALT '-' (+ (BLOCK (ALT [0-9]))))))
2022-09-25 12:18:44:377 grammar LogManager.java:25 imported rule: (RULE NUMERO (BLOCK (ALT (+ (BLOCK (ALT [0-9]))))))
2022-09-25 12:18:44:377 grammar LogManager.java:25 imported rule: (RULE INTEIROS (BLOCK (ALT (? (BLOCK (ALT '+') (ALT '-'))) (+ (BLOCK (ALT [0-9]))))))
2022-09-25 12:18:44:377 grammar LogManager.java:25 imported rule: (RULE CADEIA (BLOCK (ALT '"' (+ (BLOCK (ALT (.. 'A' 'Z')) (ALT (.. 'a' 'z')) (ALT (.. '0' '9')) (ALT '-') (ALT '_'))) '"')))
2022-09-25 12:18:44:377 grammar LogManager.java:25 imported rule: (RULE IDENTIFIER (BLOCK (ALT LETRA (* (BLOCK (ALT LETRA) (ALT NUMERO))))))
2022-09-25 12:18:44:377 grammar LogManager.java:25 imported rule: (RULE BOOLEAN (BLOCK (ALT 'TRUE') (ALT 'FALSE')))
2022-09-25 12:18:44:377 grammar LogManager.java:25 imported rule: (RULE TIPO (BLOCK (ALT 'STRING') (ALT 'INTEGER') (ALT 'BOOLEAN')))
2022-09-25 12:18:44:377 grammar LogManager.java:25 imported rule: (RULE OPAD (BLOCK (ALT '+') (ALT '-')))
2022-09-25 12:18:44:377 grammar LogManager.java:25 imported rule: (RULE OPMULT (BLOCK (ALT '*') (ALT '/')))
2022-09-25 12:18:44:377 grammar LogManager.java:25 imported rule: (RULE OPLOG (BLOCK (ALT 'OR') (ALT 'AND')))
2022-09-25 12:18:44:377 grammar LogManager.java:25 imported rule: (RULE OPNEG (BLOCK (ALT '~')))
2022-09-25 12:18:44:377 grammar LogManager.java:25 imported rule: (RULE OPREL (BLOCK (ALT '<') (ALT '<=') (ALT '>') (ALT '>=') (ALT '==') (ALT '<>')))
2022-09-25 12:18:44:377 grammar LogManager.java:25 imported rule: (RULE PVIG (BLOCK (ALT ';')))
2022-09-25 12:18:44:377 grammar LogManager.java:25 imported rule: (RULE PONTO (BLOCK (ALT '.')))
2022-09-25 12:18:44:377 grammar LogManager.java:25 imported rule: (RULE DPONTOS (BLOCK (ALT ':')))
2022-09-25 12:18:44:377 grammar LogManager.java:25 imported rule: (RULE VIG (BLOCK (ALT ',')))
2022-09-25 12:18:44:377 grammar LogManager.java:25 imported rule: (RULE ABPAR (BLOCK (ALT '(')))
2022-09-25 12:18:44:377 grammar LogManager.java:25 imported rule: (RULE FPAR (BLOCK (ALT ')')))
2022-09-25 12:18:44:377 grammar LogManager.java:25 imported rule: (RULE ATRIB (BLOCK (ALT ':=')))
2022-09-25 12:18:44:377 grammar LogManager.java:25 imported rule: (RULE RESERVADA (BLOCK (ALT 'PROGRAM') (ALT 'BEGIN') (ALT 'END') (ALT 'WHILE') (ALT 'DO') (ALT 'READ') (ALT 'VAR') (ALT 'WRITE') (ALT 'IF') (ALT 'ELSE')))
2022-09-25 12:18:44:377 grammar LogManager.java:25 imported rule: (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT ' ') (ALT '\t') (ALT '\n') (ALT '\r')))) skip)))
2022-09-25 12:18:44:377 grammar LogManager.java:25 imported rule: (RULE COMENTARIO (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip)))
2022-09-25 12:18:44:377 grammar LogManager.java:25 Grammar: (COMBINED_GRAMMAR MeAL (import Lex) (RULES (RULE prog (BLOCK (ALT 'PROGRAM' IDENTIFIER PVIG decls cmdComp PONTO) (ALT 'PROGRAM' IDENTIFIER PVIG cmdComp PONTO))) (RULE decls (BLOCK (ALT 'VAR' listDecl))) (RULE listDecl (BLOCK (ALT declTip) (ALT declTip listDecl))) (RULE declTip (BLOCK (ALT listId DPONTOS tip PVIG))) (RULE listId (BLOCK (ALT IDENTIFIER) (ALT IDENTIFIER VIG listId))) (RULE cmdComp (BLOCK (ALT 'BEGIN' listCmd 'END'))) (RULE listCmd (BLOCK (ALT cmd) (ALT cmd 'PVIG' listCmd))) (RULE cmd (BLOCK (ALT cmdIf) (ALT cmdWhile) (ALT cmdRead) (ALT cmdWrite) (ALT cmdAtrib) (ALT cmdAtrib) (ALT cmdComp))) (RULE cmdIf (BLOCK (ALT 'IF' expr 'THEN' cmd) (ALT expr 'Then' cmd 'ELSE' cmd))) (RULE cmdWhile (BLOCK (ALT 'WHILE' expr 'DO' cmd))) (RULE cmdRead (BLOCK (ALT 'READ' ABPAR listId FPAR))) (RULE cmdWrite (BLOCK (ALT 'WRITE' ABPAR listW FPAR))) (RULE listW (BLOCK (ALT elemW) (ALT elemW VIG listW))) (RULE elemW (BLOCK (ALT expr) (ALT CADEIA))) (RULE cmdAtrib (BLOCK (ALT IDENTIFIER ATRIB expr))) (RULE expr (BLOCK (ALT INTEIROS OPREL expr) (ALT INTEIROS OPAD expr) (ALT INTEIROS) (ALT INTEIROS OPMULT expr) (ALT ABPAR expr FPAR) (ALT INTEIROS OPLOG expr) (ALT IDENTIFIER) (ALT IDENTIFIER OPREL expr) (ALT IDENTIFIER OPAD expr) (ALT IDENTIFIER OPMULT expr) (ALT IDENTIFIER OPLOG expr))) (RULE exprBool (BLOCK (ALT IDENTIFIER) (ALT CTE) (ALT ABPAR exprBool FPAR) (ALT IDENTIFIER OPREL IDENTIFIER) (ALT CTE OPREL CTE) (ALT CTE OPREL IDENTIFIER) (ALT IDENTIFIER OPREL CTE))) (RULE LETRA (BLOCK (ALT [a-zA-Z]))) (RULE CTE (BLOCK (ALT (+ (BLOCK (ALT [0-9])))) (ALT '-' (+ (BLOCK (ALT [0-9])))))) (RULE NUMERO (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE INTEIROS (BLOCK (ALT (? (BLOCK (ALT '+') (ALT '-'))) (+ (BLOCK (ALT [0-9])))))) (RULE CADEIA (BLOCK (ALT '"' (+ (BLOCK (ALT (.. 'A' 'Z')) (ALT (.. 'a' 'z')) (ALT (.. '0' '9')) (ALT '-') (ALT '_'))) '"'))) (RULE IDENTIFIER (BLOCK (ALT LETRA (* (BLOCK (ALT LETRA) (ALT NUMERO)))))) (RULE BOOLEAN (BLOCK (ALT 'TRUE') (ALT 'FALSE'))) (RULE TIPO (BLOCK (ALT 'STRING') (ALT 'INTEGER') (ALT 'BOOLEAN'))) (RULE OPAD (BLOCK (ALT '+') (ALT '-'))) (RULE OPMULT (BLOCK (ALT '*') (ALT '/'))) (RULE OPLOG (BLOCK (ALT 'OR') (ALT 'AND'))) (RULE OPNEG (BLOCK (ALT '~'))) (RULE OPREL (BLOCK (ALT '<') (ALT '<=') (ALT '>') (ALT '>=') (ALT '==') (ALT '<>'))) (RULE PVIG (BLOCK (ALT ';'))) (RULE PONTO (BLOCK (ALT '.'))) (RULE DPONTOS (BLOCK (ALT ':'))) (RULE VIG (BLOCK (ALT ','))) (RULE ABPAR (BLOCK (ALT '('))) (RULE FPAR (BLOCK (ALT ')'))) (RULE ATRIB (BLOCK (ALT ':='))) (RULE RESERVADA (BLOCK (ALT 'PROGRAM') (ALT 'BEGIN') (ALT 'END') (ALT 'WHILE') (ALT 'DO') (ALT 'READ') (ALT 'VAR') (ALT 'WRITE') (ALT 'IF') (ALT 'ELSE'))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT ' ') (ALT '\t') (ALT '\n') (ALT '\r')))) skip))) (RULE COMENTARIO (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip)))))
2022-09-25 12:18:44:390 grammar LogManager.java:25 after: (COMBINED_GRAMMAR MeAL (import Lex) (RULES (RULE prog (BLOCK (ALT 'PROGRAM' IDENTIFIER PVIG decls cmdComp PONTO) (ALT 'PROGRAM' IDENTIFIER PVIG cmdComp PONTO))) (RULE decls (BLOCK (ALT 'VAR' listDecl))) (RULE listDecl (BLOCK (ALT declTip) (ALT declTip listDecl))) (RULE declTip (BLOCK (ALT listId DPONTOS tip PVIG))) (RULE listId (BLOCK (ALT IDENTIFIER) (ALT IDENTIFIER VIG listId))) (RULE cmdComp (BLOCK (ALT 'BEGIN' listCmd 'END'))) (RULE listCmd (BLOCK (ALT cmd) (ALT cmd 'PVIG' listCmd))) (RULE cmd (BLOCK (ALT cmdIf) (ALT cmdWhile) (ALT cmdRead) (ALT cmdWrite) (ALT cmdAtrib) (ALT cmdAtrib) (ALT cmdComp))) (RULE cmdIf (BLOCK (ALT 'IF' expr 'THEN' cmd) (ALT expr 'Then' cmd 'ELSE' cmd))) (RULE cmdWhile (BLOCK (ALT 'WHILE' expr 'DO' cmd))) (RULE cmdRead (BLOCK (ALT 'READ' ABPAR listId FPAR))) (RULE cmdWrite (BLOCK (ALT 'WRITE' ABPAR listW FPAR))) (RULE listW (BLOCK (ALT elemW) (ALT elemW VIG listW))) (RULE elemW (BLOCK (ALT expr) (ALT CADEIA))) (RULE cmdAtrib (BLOCK (ALT IDENTIFIER ATRIB expr))) (RULE expr (BLOCK (ALT INTEIROS OPREL expr) (ALT INTEIROS OPAD expr) (ALT INTEIROS) (ALT INTEIROS OPMULT expr) (ALT ABPAR expr FPAR) (ALT INTEIROS OPLOG expr) (ALT IDENTIFIER) (ALT IDENTIFIER OPREL expr) (ALT IDENTIFIER OPAD expr) (ALT IDENTIFIER OPMULT expr) (ALT IDENTIFIER OPLOG expr))) (RULE exprBool (BLOCK (ALT IDENTIFIER) (ALT CTE) (ALT ABPAR exprBool FPAR) (ALT IDENTIFIER OPREL IDENTIFIER) (ALT CTE OPREL CTE) (ALT CTE OPREL IDENTIFIER) (ALT IDENTIFIER OPREL CTE))) (RULE LETRA (BLOCK (ALT [a-zA-Z]))) (RULE CTE (BLOCK (ALT (+ (BLOCK (ALT [0-9])))) (ALT '-' (+ (BLOCK (ALT [0-9])))))) (RULE NUMERO (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE INTEIROS (BLOCK (ALT (? (BLOCK (ALT (SET '+' '-')))) (+ (BLOCK (ALT [0-9])))))) (RULE CADEIA (BLOCK (ALT '"' (+ (BLOCK (ALT (SET (.. 'A' 'Z') (.. 'a' 'z') (.. '0' '9') '-' '_')))) '"'))) (RULE IDENTIFIER (BLOCK (ALT LETRA (* (BLOCK (ALT LETRA) (ALT NUMERO)))))) (RULE BOOLEAN (BLOCK (ALT 'TRUE') (ALT 'FALSE'))) (RULE TIPO (BLOCK (ALT 'STRING') (ALT 'INTEGER') (ALT 'BOOLEAN'))) (RULE OPAD (BLOCK (ALT (SET '+' '-')))) (RULE OPMULT (BLOCK (ALT (SET '*' '/')))) (RULE OPLOG (BLOCK (ALT 'OR') (ALT 'AND'))) (RULE OPNEG (BLOCK (ALT '~'))) (RULE OPREL (BLOCK (ALT '<') (ALT '<=') (ALT '>') (ALT '>=') (ALT '==') (ALT '<>'))) (RULE PVIG (BLOCK (ALT ';'))) (RULE PONTO (BLOCK (ALT '.'))) (RULE DPONTOS (BLOCK (ALT ':'))) (RULE VIG (BLOCK (ALT ','))) (RULE ABPAR (BLOCK (ALT '('))) (RULE FPAR (BLOCK (ALT ')'))) (RULE ATRIB (BLOCK (ALT ':='))) (RULE RESERVADA (BLOCK (ALT 'PROGRAM') (ALT 'BEGIN') (ALT 'END') (ALT 'WHILE') (ALT 'DO') (ALT 'READ') (ALT 'VAR') (ALT 'WRITE') (ALT 'IF') (ALT 'ELSE'))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT (SET ' ' '\t' '\n' '\r'))))) skip))) (RULE COMENTARIO (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip)))))
2022-09-25 12:18:44:402 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR MeAL (import Lex) (RULES (RULE prog (BLOCK (ALT 'PROGRAM' IDENTIFIER PVIG decls cmdComp PONTO) (ALT 'PROGRAM' IDENTIFIER PVIG cmdComp PONTO))) (RULE decls (BLOCK (ALT 'VAR' listDecl))) (RULE listDecl (BLOCK (ALT declTip) (ALT declTip listDecl))) (RULE declTip (BLOCK (ALT listId DPONTOS tip PVIG))) (RULE listId (BLOCK (ALT IDENTIFIER) (ALT IDENTIFIER VIG listId))) (RULE cmdComp (BLOCK (ALT 'BEGIN' listCmd 'END'))) (RULE listCmd (BLOCK (ALT cmd) (ALT cmd 'PVIG' listCmd))) (RULE cmd (BLOCK (ALT cmdIf) (ALT cmdWhile) (ALT cmdRead) (ALT cmdWrite) (ALT cmdAtrib) (ALT cmdAtrib) (ALT cmdComp))) (RULE cmdIf (BLOCK (ALT 'IF' expr 'THEN' cmd) (ALT expr 'Then' cmd 'ELSE' cmd))) (RULE cmdWhile (BLOCK (ALT 'WHILE' expr 'DO' cmd))) (RULE cmdRead (BLOCK (ALT 'READ' ABPAR listId FPAR))) (RULE cmdWrite (BLOCK (ALT 'WRITE' ABPAR listW FPAR))) (RULE listW (BLOCK (ALT elemW) (ALT elemW VIG listW))) (RULE elemW (BLOCK (ALT expr) (ALT CADEIA))) (RULE cmdAtrib (BLOCK (ALT IDENTIFIER ATRIB expr))) (RULE expr (BLOCK (ALT INTEIROS OPREL expr) (ALT INTEIROS OPAD expr) (ALT INTEIROS) (ALT INTEIROS OPMULT expr) (ALT ABPAR expr FPAR) (ALT INTEIROS OPLOG expr) (ALT IDENTIFIER) (ALT IDENTIFIER OPREL expr) (ALT IDENTIFIER OPAD expr) (ALT IDENTIFIER OPMULT expr) (ALT IDENTIFIER OPLOG expr))) (RULE exprBool (BLOCK (ALT IDENTIFIER) (ALT CTE) (ALT ABPAR exprBool FPAR) (ALT IDENTIFIER OPREL IDENTIFIER) (ALT CTE OPREL CTE) (ALT CTE OPREL IDENTIFIER) (ALT IDENTIFIER OPREL CTE)))))
2022-09-25 12:18:44:402 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR MeALLexer (RULES (RULE T__0 (BLOCK (ALT 'PROGRAM'))) (RULE T__1 (BLOCK (ALT 'VAR'))) (RULE T__2 (BLOCK (ALT 'BEGIN'))) (RULE T__3 (BLOCK (ALT 'END'))) (RULE T__4 (BLOCK (ALT 'PVIG'))) (RULE T__5 (BLOCK (ALT 'IF'))) (RULE T__6 (BLOCK (ALT 'THEN'))) (RULE T__7 (BLOCK (ALT 'Then'))) (RULE T__8 (BLOCK (ALT 'ELSE'))) (RULE T__9 (BLOCK (ALT 'WHILE'))) (RULE T__10 (BLOCK (ALT 'DO'))) (RULE T__11 (BLOCK (ALT 'READ'))) (RULE T__12 (BLOCK (ALT 'WRITE'))) (RULE LETRA (BLOCK (ALT [a-zA-Z]))) (RULE CTE (BLOCK (ALT (+ (BLOCK (ALT [0-9])))) (ALT '-' (+ (BLOCK (ALT [0-9])))))) (RULE NUMERO (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE INTEIROS (BLOCK (ALT (? (BLOCK (ALT (SET '+' '-')))) (+ (BLOCK (ALT [0-9])))))) (RULE CADEIA (BLOCK (ALT '"' (+ (BLOCK (ALT (SET (.. 'A' 'Z') (.. 'a' 'z') (.. '0' '9') '-' '_')))) '"'))) (RULE IDENTIFIER (BLOCK (ALT LETRA (* (BLOCK (ALT LETRA) (ALT NUMERO)))))) (RULE BOOLEAN (BLOCK (ALT 'TRUE') (ALT 'FALSE'))) (RULE TIPO (BLOCK (ALT 'STRING') (ALT 'INTEGER') (ALT 'BOOLEAN'))) (RULE OPAD (BLOCK (ALT (SET '+' '-')))) (RULE OPMULT (BLOCK (ALT (SET '*' '/')))) (RULE OPLOG (BLOCK (ALT 'OR') (ALT 'AND'))) (RULE OPNEG (BLOCK (ALT '~'))) (RULE OPREL (BLOCK (ALT '<') (ALT '<=') (ALT '>') (ALT '>=') (ALT '==') (ALT '<>'))) (RULE PVIG (BLOCK (ALT ';'))) (RULE PONTO (BLOCK (ALT '.'))) (RULE DPONTOS (BLOCK (ALT ':'))) (RULE VIG (BLOCK (ALT ','))) (RULE ABPAR (BLOCK (ALT '('))) (RULE FPAR (BLOCK (ALT ')'))) (RULE ATRIB (BLOCK (ALT ':='))) (RULE RESERVADA (BLOCK (ALT 'PROGRAM') (ALT 'BEGIN') (ALT 'END') (ALT 'WHILE') (ALT 'DO') (ALT 'READ') (ALT 'VAR') (ALT 'WRITE') (ALT 'IF') (ALT 'ELSE'))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT (SET ' ' '\t' '\n' '\r'))))) skip))) (RULE COMENTARIO (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip)))))
