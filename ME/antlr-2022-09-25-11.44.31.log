2022-09-25 11:44:31:292 grammar LogManager.java:25 load Lex from MeAL.g4
2022-09-25 11:44:31:299 grammar LogManager.java:25 before: (COMBINED_GRAMMAR MeAL (import Lex) (RULES (RULE prog (BLOCK (ALT 'PROGRAM' IDENTIFIER PVIG decls cmdComp PONTO) (ALT 'PROGRAM' IDENTIFIER PVIG cmdComp PONTO))) (RULE decls (BLOCK (ALT 'VAR' listDecl))) (RULE listDecl (BLOCK (ALT declTip) (ALT declTip listDecl))) (RULE declTip (BLOCK (ALT listId DPONTOS TIPO PVIG))) (RULE listId (BLOCK (ALT IDENTIFIER) (ALT IDENTIFIER VIG listId))) (RULE cmdComp (BLOCK (ALT 'BEGIN' listCmd 'END'))) (RULE listCmd (BLOCK (ALT cmd) (ALT cmd 'PVIG' listCmd))) (RULE cmd (BLOCK (ALT cmdIf) (ALT cmdWhile) (ALT cmdRead) (ALT cmdWrite) (ALT cmdAtrib) (ALT cmdAtrib) (ALT cmdComp))) (RULE cmdIf (BLOCK (ALT 'IF' expr 'THEN' cmd) (ALT expr 'Then' cmd 'ELSE' cmd))) (RULE cmdWhile (BLOCK (ALT 'WHILE' expr 'DO' cmd))) (RULE cmdRead (BLOCK (ALT 'READ' ABPAR listId FPAR))) (RULE cmdWrite (BLOCK (ALT 'WRITE' ABPAR listW FPAR))) (RULE listW (BLOCK (ALT elemW) (ALT elemW VIG listW))) (RULE elemW (BLOCK (ALT expr) (ALT CADEIA))) (RULE cmdAtrib (BLOCK (ALT IDENTIFIER ATRIB expr))) (RULE expr (BLOCK (ALT INTEIROS OPREL expr) (ALT INTEIROS OPAD expr) (ALT INTEIROS) (ALT INTEIROS OPMULT expr) (ALT ABPAR expr FPAR) (ALT INTEIROS OPLOG expr) (ALT IDENTIFIER) (ALT IDENTIFIER OPREL expr) (ALT IDENTIFIER OPAD expr) (ALT IDENTIFIER OPMULT expr) (ALT IDENTIFIER OPLOG expr))) (RULE exprBool (BLOCK (ALT IDENTIFIER) (ALT CTE) (ALT ABPAR exprBool FPAR) (ALT IDENTIFIER OPREL IDENTIFIER) (ALT CTE OPREL CTE) (ALT CTE OPREL IDENTIFIER) (ALT IDENTIFIER OPREL CTE)))))
2022-09-25 11:44:31:301 grammar LogManager.java:25 imported actions: []
2022-09-25 11:44:31:301 grammar LogManager.java:25 imported rule: (RULE CTE (BLOCK (ALT (+ (BLOCK (ALT [0-9])))) (ALT '-' (+ (BLOCK (ALT [0-9]))))))
2022-09-25 11:44:31:301 grammar LogManager.java:25 imported rule: (RULE NUMERO (BLOCK (ALT (+ (BLOCK (ALT [0-9]))))))
2022-09-25 11:44:31:301 grammar LogManager.java:25 imported rule: (RULE INTEIROS (BLOCK (ALT (? (BLOCK (ALT '+') (ALT '-'))) (+ (BLOCK (ALT [0-9]))))))
2022-09-25 11:44:31:301 grammar LogManager.java:25 imported rule: (RULE CADEIA (BLOCK (ALT '"' (+ (BLOCK (ALT (.. 'A' 'Z')) (ALT (.. 'a' 'z')) (ALT (.. '0' '9')) (ALT '-') (ALT '_'))) '"')))
2022-09-25 11:44:31:301 grammar LogManager.java:25 imported rule: (RULE IDENTIFIER (BLOCK (ALT [a-zA-Z] (+ (BLOCK (ALT [a-zA-Z0-9]))))))
2022-09-25 11:44:31:301 grammar LogManager.java:25 imported rule: (RULE BOOLEAN (BLOCK (ALT 'TRUE') (ALT 'FALSE')))
2022-09-25 11:44:31:301 grammar LogManager.java:25 imported rule: (RULE TIPO (BLOCK (ALT 'STRING') (ALT 'INTEGER') (ALT 'BOOLEAN')))
2022-09-25 11:44:31:301 grammar LogManager.java:25 imported rule: (RULE OPAD (BLOCK (ALT '+') (ALT '-')))
2022-09-25 11:44:31:301 grammar LogManager.java:25 imported rule: (RULE OPMULT (BLOCK (ALT '*') (ALT '/')))
2022-09-25 11:44:31:301 grammar LogManager.java:25 imported rule: (RULE OPLOG (BLOCK (ALT 'OR') (ALT 'AND')))
2022-09-25 11:44:31:301 grammar LogManager.java:25 imported rule: (RULE OPNEG (BLOCK (ALT '~')))
2022-09-25 11:44:31:301 grammar LogManager.java:25 imported rule: (RULE OPREL (BLOCK (ALT '<') (ALT '<=') (ALT '>') (ALT '>=') (ALT '==') (ALT '<>')))
2022-09-25 11:44:31:301 grammar LogManager.java:25 imported rule: (RULE PVIG (BLOCK (ALT ';')))
2022-09-25 11:44:31:301 grammar LogManager.java:25 imported rule: (RULE PONTO (BLOCK (ALT '.')))
2022-09-25 11:44:31:301 grammar LogManager.java:25 imported rule: (RULE DPONTOS (BLOCK (ALT ':')))
2022-09-25 11:44:31:301 grammar LogManager.java:25 imported rule: (RULE VIG (BLOCK (ALT ',')))
2022-09-25 11:44:31:301 grammar LogManager.java:25 imported rule: (RULE ABPAR (BLOCK (ALT '(')))
2022-09-25 11:44:31:301 grammar LogManager.java:25 imported rule: (RULE FPAR (BLOCK (ALT ')')))
2022-09-25 11:44:31:301 grammar LogManager.java:25 imported rule: (RULE ATRIB (BLOCK (ALT ':=')))
2022-09-25 11:44:31:301 grammar LogManager.java:25 imported rule: (RULE RESERVADA (BLOCK (ALT 'PROGRAM') (ALT 'BEGIN') (ALT 'END') (ALT 'WHILE') (ALT 'DO') (ALT 'READ') (ALT 'VAR') (ALT 'WRITE') (ALT 'IF') (ALT 'ELSE')))
2022-09-25 11:44:31:301 grammar LogManager.java:25 imported rule: (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT ' ') (ALT '\t') (ALT '\n') (ALT '\r')))) skip)))
2022-09-25 11:44:31:301 grammar LogManager.java:25 imported rule: (RULE COMENTARIO (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip)))
2022-09-25 11:44:31:302 grammar LogManager.java:25 Grammar: (COMBINED_GRAMMAR MeAL (import Lex) (RULES (RULE prog (BLOCK (ALT 'PROGRAM' IDENTIFIER PVIG decls cmdComp PONTO) (ALT 'PROGRAM' IDENTIFIER PVIG cmdComp PONTO))) (RULE decls (BLOCK (ALT 'VAR' listDecl))) (RULE listDecl (BLOCK (ALT declTip) (ALT declTip listDecl))) (RULE declTip (BLOCK (ALT listId DPONTOS TIPO PVIG))) (RULE listId (BLOCK (ALT IDENTIFIER) (ALT IDENTIFIER VIG listId))) (RULE cmdComp (BLOCK (ALT 'BEGIN' listCmd 'END'))) (RULE listCmd (BLOCK (ALT cmd) (ALT cmd 'PVIG' listCmd))) (RULE cmd (BLOCK (ALT cmdIf) (ALT cmdWhile) (ALT cmdRead) (ALT cmdWrite) (ALT cmdAtrib) (ALT cmdAtrib) (ALT cmdComp))) (RULE cmdIf (BLOCK (ALT 'IF' expr 'THEN' cmd) (ALT expr 'Then' cmd 'ELSE' cmd))) (RULE cmdWhile (BLOCK (ALT 'WHILE' expr 'DO' cmd))) (RULE cmdRead (BLOCK (ALT 'READ' ABPAR listId FPAR))) (RULE cmdWrite (BLOCK (ALT 'WRITE' ABPAR listW FPAR))) (RULE listW (BLOCK (ALT elemW) (ALT elemW VIG listW))) (RULE elemW (BLOCK (ALT expr) (ALT CADEIA))) (RULE cmdAtrib (BLOCK (ALT IDENTIFIER ATRIB expr))) (RULE expr (BLOCK (ALT INTEIROS OPREL expr) (ALT INTEIROS OPAD expr) (ALT INTEIROS) (ALT INTEIROS OPMULT expr) (ALT ABPAR expr FPAR) (ALT INTEIROS OPLOG expr) (ALT IDENTIFIER) (ALT IDENTIFIER OPREL expr) (ALT IDENTIFIER OPAD expr) (ALT IDENTIFIER OPMULT expr) (ALT IDENTIFIER OPLOG expr))) (RULE exprBool (BLOCK (ALT IDENTIFIER) (ALT CTE) (ALT ABPAR exprBool FPAR) (ALT IDENTIFIER OPREL IDENTIFIER) (ALT CTE OPREL CTE) (ALT CTE OPREL IDENTIFIER) (ALT IDENTIFIER OPREL CTE))) (RULE CTE (BLOCK (ALT (+ (BLOCK (ALT [0-9])))) (ALT '-' (+ (BLOCK (ALT [0-9])))))) (RULE NUMERO (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE INTEIROS (BLOCK (ALT (? (BLOCK (ALT '+') (ALT '-'))) (+ (BLOCK (ALT [0-9])))))) (RULE CADEIA (BLOCK (ALT '"' (+ (BLOCK (ALT (.. 'A' 'Z')) (ALT (.. 'a' 'z')) (ALT (.. '0' '9')) (ALT '-') (ALT '_'))) '"'))) (RULE IDENTIFIER (BLOCK (ALT [a-zA-Z] (+ (BLOCK (ALT [a-zA-Z0-9])))))) (RULE BOOLEAN (BLOCK (ALT 'TRUE') (ALT 'FALSE'))) (RULE TIPO (BLOCK (ALT 'STRING') (ALT 'INTEGER') (ALT 'BOOLEAN'))) (RULE OPAD (BLOCK (ALT '+') (ALT '-'))) (RULE OPMULT (BLOCK (ALT '*') (ALT '/'))) (RULE OPLOG (BLOCK (ALT 'OR') (ALT 'AND'))) (RULE OPNEG (BLOCK (ALT '~'))) (RULE OPREL (BLOCK (ALT '<') (ALT '<=') (ALT '>') (ALT '>=') (ALT '==') (ALT '<>'))) (RULE PVIG (BLOCK (ALT ';'))) (RULE PONTO (BLOCK (ALT '.'))) (RULE DPONTOS (BLOCK (ALT ':'))) (RULE VIG (BLOCK (ALT ','))) (RULE ABPAR (BLOCK (ALT '('))) (RULE FPAR (BLOCK (ALT ')'))) (RULE ATRIB (BLOCK (ALT ':='))) (RULE RESERVADA (BLOCK (ALT 'PROGRAM') (ALT 'BEGIN') (ALT 'END') (ALT 'WHILE') (ALT 'DO') (ALT 'READ') (ALT 'VAR') (ALT 'WRITE') (ALT 'IF') (ALT 'ELSE'))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT ' ') (ALT '\t') (ALT '\n') (ALT '\r')))) skip))) (RULE COMENTARIO (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip)))))
2022-09-25 11:44:31:314 grammar LogManager.java:25 after: (COMBINED_GRAMMAR MeAL (import Lex) (RULES (RULE prog (BLOCK (ALT 'PROGRAM' IDENTIFIER PVIG decls cmdComp PONTO) (ALT 'PROGRAM' IDENTIFIER PVIG cmdComp PONTO))) (RULE decls (BLOCK (ALT 'VAR' listDecl))) (RULE listDecl (BLOCK (ALT declTip) (ALT declTip listDecl))) (RULE declTip (BLOCK (ALT listId DPONTOS TIPO PVIG))) (RULE listId (BLOCK (ALT IDENTIFIER) (ALT IDENTIFIER VIG listId))) (RULE cmdComp (BLOCK (ALT 'BEGIN' listCmd 'END'))) (RULE listCmd (BLOCK (ALT cmd) (ALT cmd 'PVIG' listCmd))) (RULE cmd (BLOCK (ALT cmdIf) (ALT cmdWhile) (ALT cmdRead) (ALT cmdWrite) (ALT cmdAtrib) (ALT cmdAtrib) (ALT cmdComp))) (RULE cmdIf (BLOCK (ALT 'IF' expr 'THEN' cmd) (ALT expr 'Then' cmd 'ELSE' cmd))) (RULE cmdWhile (BLOCK (ALT 'WHILE' expr 'DO' cmd))) (RULE cmdRead (BLOCK (ALT 'READ' ABPAR listId FPAR))) (RULE cmdWrite (BLOCK (ALT 'WRITE' ABPAR listW FPAR))) (RULE listW (BLOCK (ALT elemW) (ALT elemW VIG listW))) (RULE elemW (BLOCK (ALT expr) (ALT CADEIA))) (RULE cmdAtrib (BLOCK (ALT IDENTIFIER ATRIB expr))) (RULE expr (BLOCK (ALT INTEIROS OPREL expr) (ALT INTEIROS OPAD expr) (ALT INTEIROS) (ALT INTEIROS OPMULT expr) (ALT ABPAR expr FPAR) (ALT INTEIROS OPLOG expr) (ALT IDENTIFIER) (ALT IDENTIFIER OPREL expr) (ALT IDENTIFIER OPAD expr) (ALT IDENTIFIER OPMULT expr) (ALT IDENTIFIER OPLOG expr))) (RULE exprBool (BLOCK (ALT IDENTIFIER) (ALT CTE) (ALT ABPAR exprBool FPAR) (ALT IDENTIFIER OPREL IDENTIFIER) (ALT CTE OPREL CTE) (ALT CTE OPREL IDENTIFIER) (ALT IDENTIFIER OPREL CTE))) (RULE CTE (BLOCK (ALT (+ (BLOCK (ALT [0-9])))) (ALT '-' (+ (BLOCK (ALT [0-9])))))) (RULE NUMERO (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE INTEIROS (BLOCK (ALT (? (BLOCK (ALT (SET '+' '-')))) (+ (BLOCK (ALT [0-9])))))) (RULE CADEIA (BLOCK (ALT '"' (+ (BLOCK (ALT (SET (.. 'A' 'Z') (.. 'a' 'z') (.. '0' '9') '-' '_')))) '"'))) (RULE IDENTIFIER (BLOCK (ALT [a-zA-Z] (+ (BLOCK (ALT [a-zA-Z0-9])))))) (RULE BOOLEAN (BLOCK (ALT 'TRUE') (ALT 'FALSE'))) (RULE TIPO (BLOCK (ALT 'STRING') (ALT 'INTEGER') (ALT 'BOOLEAN'))) (RULE OPAD (BLOCK (ALT (SET '+' '-')))) (RULE OPMULT (BLOCK (ALT (SET '*' '/')))) (RULE OPLOG (BLOCK (ALT 'OR') (ALT 'AND'))) (RULE OPNEG (BLOCK (ALT '~'))) (RULE OPREL (BLOCK (ALT '<') (ALT '<=') (ALT '>') (ALT '>=') (ALT '==') (ALT '<>'))) (RULE PVIG (BLOCK (ALT ';'))) (RULE PONTO (BLOCK (ALT '.'))) (RULE DPONTOS (BLOCK (ALT ':'))) (RULE VIG (BLOCK (ALT ','))) (RULE ABPAR (BLOCK (ALT '('))) (RULE FPAR (BLOCK (ALT ')'))) (RULE ATRIB (BLOCK (ALT ':='))) (RULE RESERVADA (BLOCK (ALT 'PROGRAM') (ALT 'BEGIN') (ALT 'END') (ALT 'WHILE') (ALT 'DO') (ALT 'READ') (ALT 'VAR') (ALT 'WRITE') (ALT 'IF') (ALT 'ELSE'))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT (SET ' ' '\t' '\n' '\r'))))) skip))) (RULE COMENTARIO (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip)))))
2022-09-25 11:44:31:325 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR MeAL (import Lex) (RULES (RULE prog (BLOCK (ALT 'PROGRAM' IDENTIFIER PVIG decls cmdComp PONTO) (ALT 'PROGRAM' IDENTIFIER PVIG cmdComp PONTO))) (RULE decls (BLOCK (ALT 'VAR' listDecl))) (RULE listDecl (BLOCK (ALT declTip) (ALT declTip listDecl))) (RULE declTip (BLOCK (ALT listId DPONTOS TIPO PVIG))) (RULE listId (BLOCK (ALT IDENTIFIER) (ALT IDENTIFIER VIG listId))) (RULE cmdComp (BLOCK (ALT 'BEGIN' listCmd 'END'))) (RULE listCmd (BLOCK (ALT cmd) (ALT cmd 'PVIG' listCmd))) (RULE cmd (BLOCK (ALT cmdIf) (ALT cmdWhile) (ALT cmdRead) (ALT cmdWrite) (ALT cmdAtrib) (ALT cmdAtrib) (ALT cmdComp))) (RULE cmdIf (BLOCK (ALT 'IF' expr 'THEN' cmd) (ALT expr 'Then' cmd 'ELSE' cmd))) (RULE cmdWhile (BLOCK (ALT 'WHILE' expr 'DO' cmd))) (RULE cmdRead (BLOCK (ALT 'READ' ABPAR listId FPAR))) (RULE cmdWrite (BLOCK (ALT 'WRITE' ABPAR listW FPAR))) (RULE listW (BLOCK (ALT elemW) (ALT elemW VIG listW))) (RULE elemW (BLOCK (ALT expr) (ALT CADEIA))) (RULE cmdAtrib (BLOCK (ALT IDENTIFIER ATRIB expr))) (RULE expr (BLOCK (ALT INTEIROS OPREL expr) (ALT INTEIROS OPAD expr) (ALT INTEIROS) (ALT INTEIROS OPMULT expr) (ALT ABPAR expr FPAR) (ALT INTEIROS OPLOG expr) (ALT IDENTIFIER) (ALT IDENTIFIER OPREL expr) (ALT IDENTIFIER OPAD expr) (ALT IDENTIFIER OPMULT expr) (ALT IDENTIFIER OPLOG expr))) (RULE exprBool (BLOCK (ALT IDENTIFIER) (ALT CTE) (ALT ABPAR exprBool FPAR) (ALT IDENTIFIER OPREL IDENTIFIER) (ALT CTE OPREL CTE) (ALT CTE OPREL IDENTIFIER) (ALT IDENTIFIER OPREL CTE)))))
2022-09-25 11:44:31:325 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR MeALLexer (RULES (RULE T__0 (BLOCK (ALT 'PROGRAM'))) (RULE T__1 (BLOCK (ALT 'VAR'))) (RULE T__2 (BLOCK (ALT 'BEGIN'))) (RULE T__3 (BLOCK (ALT 'END'))) (RULE T__4 (BLOCK (ALT 'PVIG'))) (RULE T__5 (BLOCK (ALT 'IF'))) (RULE T__6 (BLOCK (ALT 'THEN'))) (RULE T__7 (BLOCK (ALT 'Then'))) (RULE T__8 (BLOCK (ALT 'ELSE'))) (RULE T__9 (BLOCK (ALT 'WHILE'))) (RULE T__10 (BLOCK (ALT 'DO'))) (RULE T__11 (BLOCK (ALT 'READ'))) (RULE T__12 (BLOCK (ALT 'WRITE'))) (RULE CTE (BLOCK (ALT (+ (BLOCK (ALT [0-9])))) (ALT '-' (+ (BLOCK (ALT [0-9])))))) (RULE NUMERO (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE INTEIROS (BLOCK (ALT (? (BLOCK (ALT (SET '+' '-')))) (+ (BLOCK (ALT [0-9])))))) (RULE CADEIA (BLOCK (ALT '"' (+ (BLOCK (ALT (SET (.. 'A' 'Z') (.. 'a' 'z') (.. '0' '9') '-' '_')))) '"'))) (RULE IDENTIFIER (BLOCK (ALT [a-zA-Z] (+ (BLOCK (ALT [a-zA-Z0-9])))))) (RULE BOOLEAN (BLOCK (ALT 'TRUE') (ALT 'FALSE'))) (RULE TIPO (BLOCK (ALT 'STRING') (ALT 'INTEGER') (ALT 'BOOLEAN'))) (RULE OPAD (BLOCK (ALT (SET '+' '-')))) (RULE OPMULT (BLOCK (ALT (SET '*' '/')))) (RULE OPLOG (BLOCK (ALT 'OR') (ALT 'AND'))) (RULE OPNEG (BLOCK (ALT '~'))) (RULE OPREL (BLOCK (ALT '<') (ALT '<=') (ALT '>') (ALT '>=') (ALT '==') (ALT '<>'))) (RULE PVIG (BLOCK (ALT ';'))) (RULE PONTO (BLOCK (ALT '.'))) (RULE DPONTOS (BLOCK (ALT ':'))) (RULE VIG (BLOCK (ALT ','))) (RULE ABPAR (BLOCK (ALT '('))) (RULE FPAR (BLOCK (ALT ')'))) (RULE ATRIB (BLOCK (ALT ':='))) (RULE RESERVADA (BLOCK (ALT 'PROGRAM') (ALT 'BEGIN') (ALT 'END') (ALT 'WHILE') (ALT 'DO') (ALT 'READ') (ALT 'VAR') (ALT 'WRITE') (ALT 'IF') (ALT 'ELSE'))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT (SET ' ' '\t' '\n' '\r'))))) skip))) (RULE COMENTARIO (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip)))))
2022-09-25 11:44:31:436 semantics LogManager.java:25 tokens={EOF=-1, T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, T__9=10, T__10=11, T__11=12, T__12=13, CTE=14, NUMERO=15, INTEIROS=16, CADEIA=17, IDENTIFIER=18, BOOLEAN=19, TIPO=20, OPAD=21, OPMULT=22, OPLOG=23, OPNEG=24, OPREL=25, PVIG=26, PONTO=27, DPONTOS=28, VIG=29, ABPAR=30, FPAR=31, ATRIB=32, RESERVADA=33, WS=34, COMENTARIO=35}
2022-09-25 11:44:31:436 semantics LogManager.java:25 strings={'PROGRAM'=1, 'VAR'=2, 'BEGIN'=3, 'END'=4, 'PVIG'=5, 'IF'=6, 'THEN'=7, 'Then'=8, 'ELSE'=9, 'WHILE'=10, 'DO'=11, 'READ'=12, 'WRITE'=13, '~'=24, ';'=26, '.'=27, ':'=28, ','=29, '('=30, ')'=31, ':='=32}
2022-09-25 11:44:31:439 LL1 LogManager.java:25 
DECISION 0 in rule prog
2022-09-25 11:44:31:440 LL1 LogManager.java:25 look=[1, 1]
2022-09-25 11:44:31:440 LL1 LogManager.java:25 LL(1)? false
2022-09-25 11:44:31:440 LL1 LogManager.java:25 
DECISION 1 in rule listDecl
2022-09-25 11:44:31:440 LL1 LogManager.java:25 look=[18, 18]
2022-09-25 11:44:31:440 LL1 LogManager.java:25 LL(1)? false
2022-09-25 11:44:31:440 LL1 LogManager.java:25 
DECISION 2 in rule listId
2022-09-25 11:44:31:440 LL1 LogManager.java:25 look=[18, 18]
2022-09-25 11:44:31:440 LL1 LogManager.java:25 LL(1)? false
2022-09-25 11:44:31:440 LL1 LogManager.java:25 
DECISION 3 in rule listCmd
2022-09-25 11:44:31:441 LL1 LogManager.java:25 look=[{3, 6, 10, 12..13, 16, 18, 30}, {3, 6, 10, 12..13, 16, 18, 30}]
2022-09-25 11:44:31:441 LL1 LogManager.java:25 LL(1)? false
2022-09-25 11:44:31:441 LL1 LogManager.java:25 
DECISION 4 in rule cmd
2022-09-25 11:44:31:441 LL1 LogManager.java:25 look=[{6, 16, 18, 30}, 10, 12, 13, 18, 18, 3]
2022-09-25 11:44:31:441 LL1 LogManager.java:25 LL(1)? false
2022-09-25 11:44:31:441 LL1 LogManager.java:25 
DECISION 5 in rule cmdIf
2022-09-25 11:44:31:441 LL1 LogManager.java:25 look=[6, {16, 18, 30}]
2022-09-25 11:44:31:441 LL1 LogManager.java:25 LL(1)? true
2022-09-25 11:44:31:441 LL1 LogManager.java:25 
DECISION 6 in rule listW
2022-09-25 11:44:31:441 LL1 LogManager.java:25 look=[{16..18, 30}, {16..18, 30}]
2022-09-25 11:44:31:441 LL1 LogManager.java:25 LL(1)? false
2022-09-25 11:44:31:441 LL1 LogManager.java:25 
DECISION 7 in rule elemW
2022-09-25 11:44:31:441 LL1 LogManager.java:25 look=[{16, 18, 30}, 17]
2022-09-25 11:44:31:441 LL1 LogManager.java:25 LL(1)? true
2022-09-25 11:44:31:441 LL1 LogManager.java:25 
DECISION 8 in rule expr
2022-09-25 11:44:31:441 LL1 LogManager.java:25 look=[16, 16, 16, 16, 30, 16, 18, 18, 18, 18, 18]
2022-09-25 11:44:31:441 LL1 LogManager.java:25 LL(1)? false
2022-09-25 11:44:31:441 LL1 LogManager.java:25 
DECISION 9 in rule exprBool
2022-09-25 11:44:31:441 LL1 LogManager.java:25 look=[18, 14, 30, 18, 14, 14, 18]
2022-09-25 11:44:31:441 LL1 LogManager.java:25 LL(1)? false
